@startuml
set namespaceSeparator ::


class classic::beverages::CoffeeMachine {
+ void request(class classic::beverages::Command *c)
+ void start()
+ void setState(CoffeeMachineState *newState)
+ void execute(string const &cmd)
}

interface classic::beverages::Command {
+ void execute()
}

class classic::beverages::MakeMilkFoam {
+ void execute()
+ void setMlMilk(int mlMilk)
}


class classic::beverages::MilkFoam {
+ void makeFoam(int mlMilk)
}


class classic::beverages::MakeCaffeineDrink {
+ void execute()
}


class classic::beverages::CaffeineBeverage {
+ void prepareReceipe()
}


class classic::beverages::Condiment {
+ int description()
+ float price()
}

class classic::beverages::Milk {
}

class classic::beverages::Sugar {
}

interface classic::beverages::Receipe {
+ void brew()
+ void addCondiments()
}

class classic::beverages::CoffeeReceipe {
+ void brew()
+ void addCondiments()
}

class classic::beverages::TeaReceipe {
+ void brew()
+ void addCondiments()
}

class classic::beverages::CoffeeMachineState{
+ virtual void action(CoffeeMachine &coffeeMachine, string const &cmd)  
}

class classic::beverages::CoffeeMachineObserver{
+ virtual void finished() = 0
}

class classic::beverages::View
{
+ virtual void finished()
}

class classic::beverages::ObservableCoffeeMachine
{
+ void addObserver(Observers::value_type o)
+ void removeObserver(Observers::value_type o)
# void notifyFinished()
}

namespace classic {
namespace beverages {
note right of ObservableCoffeeMachine::notifyFinished
                for (Observers::iterator it(m_observers.begin()); 
                it != m_observers.end(); ++it)
                {
                    (*it)->finished();
                }
end note
}
}

class classic::beverages::Coffee
{   
}

class classic::beverages::Tea
{   
}

class classic::beverages::CaffeineBeverageFactory
{
    virtual CaffeineBeverage* create() = 0
}

class classic::beverages::CoffeeFactory
{
    virtual CaffeineBeverage* create()
}

class classic::beverages::TeaFactory
{
    virtual CaffeineBeverage* create()
}


class classic::beverages::BeverageFactory
{

}


classic::beverages::CoffeeReceipe -up-|> classic::beverages::Receipe
classic::beverages::MakeCaffeineDrink -up-|> classic::beverages::Command
classic::beverages::Milk -up-|> classic::beverages::Condiment
classic::beverages::Sugar -up-|> classic::beverages::Condiment
classic::beverages::TeaReceipe -up-|> classic::beverages::Receipe



classic::beverages::Command <-up-* classic::beverages::CoffeeMachine   


classic::beverages::CaffeineBeverage *-right-> classic::beverages::Receipe

classic::beverages::MakeCaffeineDrink *--> classic::beverages::CaffeineBeverage

classic::beverages::MakeMilkFoam -up-|> classic::beverages::Command
classic::beverages::MilkFoam <-up-* classic::beverages::MakeMilkFoam


classic::beverages::CoffeeMachine -up-|> classic::beverages::ObservableCoffeeMachine
classic::beverages::ObservableCoffeeMachine *-right-> classic::beverages::CoffeeMachineObserver
classic::beverages::View -up-|> classic::beverages::CoffeeMachineObserver 
classic::beverages::CoffeeMachine *--> classic::beverages::CoffeeMachineState

classic::beverages::View "&view".left.> classic::beverages::CoffeeMachine

classic::beverages::Coffee -up-|> classic::beverages::CaffeineBeverage

classic::beverages::Tea -up-|> classic::beverages::CaffeineBeverage

classic::beverages::CoffeeFactory -up-|> classic::beverages::CaffeineBeverageFactory

classic::beverages::TeaFactory -up-|> classic::beverages::CaffeineBeverageFactory

classic::beverages::CoffeeFactory .right.> classic::beverages::Coffee

classic::beverages::TeaFactory .right.> classic::beverages::Tea

classic::beverages::CaffeineBeverageFactory .right.> classic::beverages::CaffeineBeverage


classic::beverages::BeverageFactory *-right-> classic::beverages::CaffeineBeverageFactory

classic::beverages::BeverageFactory .right.> classic::beverages::CoffeeFactory

classic::beverages::BeverageFactory .right.> classic::beverages::TeaFactory

@enduml
