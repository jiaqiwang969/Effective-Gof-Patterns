@startuml
set namespaceSeparator ::


class classic::CoffeeMachine {
+ void request(class classic::Command *c)
+ void start()
+ void setState(CoffeeMachineState *newState)
+ void execute(string const &cmd)
}

interface classic::Command {
+ void execute()
}

class classic::MakeMilkFoam {
+ void execute()
+ void setMlMilk(int mlMilk)
}


class classic::MilkFoam {
+ void makeFoam(int mlMilk)
}


class classic::MakeCaffeineDrink {
+ void execute()
}


class classic::CaffeineBeverage {
+ void prepareRecipe()
+ void condiments(Condiment *condiments)
- Recipe &m_recipe;
- Condiment *m_condiments;
}


class classic::Condiment {
+ int description()
+ float price()
}

class classic::Milk {
}

class classic::Sugar {
}

interface classic::Recipe {
+ void brew()
+ void addCondiments()
}

class classic::CoffeeRecipe {
+ void brew()
+ void addCondiments()
}

class classic::TeaRecipe {
+ void brew()
+ void addCondiments()
}

class classic::CoffeeMachineState{
+ virtual void action(CoffeeMachine &coffeeMachine, string const &cmd)  
}

class classic::CoffeeMachineObserver{
+ virtual void finished() = 0
}

class classic::View
{
+ virtual void finished()
}

class classic::ObservableCoffeeMachine
{
+ void addObserver(Observers::value_type o)
+ void removeObserver(Observers::value_type o)
# void notifyFinished()
}

namespace classic {
note right of ObservableCoffeeMachine::notifyFinished
                for (Observers::iterator it(m_observers.begin()); 
                it != m_observers.end(); ++it)
                {
                    (*it)->finished();
                }
end note
}

class classic::Coffee
{   
}

class classic::Tea
{   
}

class classic::CaffeineBeverageFactory
{
    virtual CaffeineBeverage* create() = 0
}

class classic::CoffeeFactory
{
    virtual CaffeineBeverage* create()
}

class classic::TeaFactory
{
    virtual CaffeineBeverage* create()
}


class classic::BeverageFactory
{
+ CaffeineBeverage *create(std::string const &beverage)
- std::map<std::string, CaffeineBeverageFactory *> m_factory
}


class classic::CaffeineCondimentFactory
{
+ virtual Condiment *create(Condiment *) = 0
}

class classic::CondimentFactory
{
+ Condiment *create(std::string const &beverage, Condiment *condiment)
- std::map<std::string, CaffeineCondimentFactory *> m_factory
}

class classic::MilkFactory
{
+ virtual Condiment *create(Condiment *condiment)
}

class classic::SugarFactory
{
+ virtual Condiment *create(Condiment *condiment)
}




classic::CoffeeRecipe -up-|> classic::Recipe
classic::MakeCaffeineDrink -up-|> classic::Command
classic::Milk -up-|> classic::Condiment
classic::Sugar -up-|> classic::Condiment
classic::TeaRecipe -up-|> classic::Recipe



classic::Command "0..n"<-up-*"CommandQ" classic::CoffeeMachine   


classic::CaffeineBeverage *-right-> classic::Recipe

classic::MakeCaffeineDrink --> classic::CaffeineBeverage

classic::MakeMilkFoam -up-|> classic::Command
classic::MilkFoam <-up- classic::MakeMilkFoam


classic::CoffeeMachine -up-|> classic::ObservableCoffeeMachine
classic::ObservableCoffeeMachine *-right-> classic::CoffeeMachineObserver
classic::View -up-|> classic::CoffeeMachineObserver 
classic::CoffeeMachine *--> classic::CoffeeMachineState

classic::View "&view".left.> classic::CoffeeMachine

classic::Coffee -up-|> classic::CaffeineBeverage

classic::Tea -up-|> classic::CaffeineBeverage

classic::CoffeeFactory -up-|> classic::CaffeineBeverageFactory

classic::TeaFactory -up-|> classic::CaffeineBeverageFactory

classic::CoffeeFactory .right.> classic::Coffee

classic::TeaFactory .right.> classic::Tea

classic::CaffeineBeverageFactory "工厂".right.> classic::CaffeineBeverage


classic::BeverageFactory *-right-> classic::CaffeineBeverageFactory

classic::BeverageFactory .right.> classic::CoffeeFactory

classic::BeverageFactory .right.> classic::TeaFactory


classic::MilkFactory -up-|> classic::CaffeineCondimentFactory

classic::SugarFactory -up-|> classic::CaffeineCondimentFactory

classic::MilkFactory .right.> classic::Milk

classic::SugarFactory .right.> classic::Sugar

classic::CaffeineCondimentFactory "工厂".right.> classic::Condiment


classic::CondimentFactory ..> classic::SugarFactory

classic::CondimentFactory ..> classic::MilkFactory

classic::CondimentFactory *-right-> classic::CaffeineCondimentFactory



classic::CaffeineBeverage *-right-> classic::Condiment


' --------分割线--------


class cpp11::CaffeineBeverage {
+ void prepareRecipe() const
+ string description() const
- string m_description;
- Condiment m_condiment;
}

class cpp11::CoffeeMachine {
+ void request(vector<function<void()>> ::value_type c)
+ void start()
+ void getNotifiedOnFinished(function<void()> callback)
- boost::signals2::signal<void()> m_sigFinished;
}


class cpp11::Condiment {
+ function<string()> description
+ function<float()> price
}

class cpp11::Milk {
+ static string description()
+ static float price()
}

class cpp11::Sugar {
+ static string description()
+ static float price()
}


class cpp11::MilkFoam {
+ void makeFoam(int mlMilk)
}

' class cpp11::Recipe {
' + function<void()> brew;
' + function<void()> addCondiments;
' }

class cpp11::Recipes {
+ static void brewCoffee(int minutes)
+ static void brewTea(int minutes)
+ static void addSugarAndMilk()
+ static void addLemon()
}

class cpp11::accu<typename Res> {
+ static Res accu(std::function<Res()> call, std::function<Res()> next)
}


class cpp11::View
{
+ void coffeeMachineFinished()
}

class cpp11::CondimentFactory
{
+ Condiment create(std::string const &beverage)
- map<std::string, CreateFun> m_factory

}

class cpp11::BeverageFactory
{
+ unique_ptr<CaffeineBeverage> create(std::string const &beverage)
- map<std::string, CreateFun> m_factory;

}



' cpp11::BeverageFactory "create"..> cpp11::CaffeineBeverage

' cpp11::CondimentFactory "create"..> cpp11::CaffeineBeverage

' cpp11::BeverageFactory "boost::factory"..> cpp11::Recipes

' cpp11::CaffeineBeverage *-right-> cpp11::Recipe

cpp11::CoffeeMachine "bind"..> cpp11::CaffeineBeverage

' cpp11::CaffeineBeverage "bind"..> cpp11::Recipes


cpp11::CoffeeMachine "bind"..> cpp11::MilkFoam

cpp11::View "signal2".left.> cpp11::CoffeeMachine


cpp11::CaffeineBeverage *-->  cpp11::Condiment
cpp11::CondimentFactory "工厂".up.>  cpp11::Condiment

cpp11::BeverageFactory "工厂".up.>  cpp11::CaffeineBeverage


cpp11::Sugar .up.> cpp11::CondimentFactory
cpp11::Milk .up.> cpp11::CondimentFactory

cpp11::accu "bind"..>  cpp11::Milk
cpp11::accu "bind"..>  cpp11::Sugar

cpp11::Recipes "bind"..>  cpp11::BeverageFactory

' cpp11::CaffeineBeverage *--> cpp11::Recipes

@enduml
